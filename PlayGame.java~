/**
 * Name: Dale Savage
 * Course: CSE 271 H
 * Instructor: Chayan Walia
 * Name of Assignment: Go Fish Card Game
 * Purpose: The purpose of this program is to create a functioning go fish card game using card.java, deck.java, and hand.java
 */


import java.util.*; // imports everything

public class PlayGame
{
  
  public static void main(String args[]) { 
    Scanner keyboardReader = new Scanner(System.in); // allows us to get the input
    System.out.println("Welcome to a game of Go Fish. How many CPU's do you want to play?(Max 3), (0 to quit)");
    
    int numPlayers = keyboardReader.nextInt();
    
    while (numPlayers != 0 && (numPlayers < 1 || numPlayers > 3))
    {
      System.out.println("Sorry, invalid number of players. Try again.");
      numPlayers = keyboardReader.nextInt();
    }
    
    
    DeckList deck = new DeckList();
    deck.shuffle();
    
    
    Hand player1Hand, player2Hand, player3Hand, player4Hand;
    
    
    
    boolean game = true;
    int choice = 1;
    
    if(numPlayers == 1)
    {
      player1Hand = createHand(deck);
      player1Hand.sortHandByRank();
      
      player2Hand = createHand(deck); 
      player2Hand.sortHandByRank();
      
      while (game == true)
      {
        while (deck.getCardsLeft() > 0 && player1Hand.length > 0 && player2Hand.length > 0)
        {
          System.out.println("Player 1's turn. Your cards are:");
          player1Hand.show();
          System.out.println("Move options: (0 to skip)");
          System.out.println("1. Ask player 2 for a card.");
          choice = keyboardReader.nextInt();
          
          while (choice != 1 || choice !=0)
          {
            System.out.println("Invalid input! Input correct choice by number.");
            choice = keyboardReader.nextInt();
          }
          
          if (choice = 1)
          {
            System.out.println("What card do you want to ask for? (1 = ace, 11 = jack, ect.)");
            int cardRank = keyboardReader.nextInt();
            while(cardRank > 14 || cardRank < 1)
            {
              System.out.println("Invalid card! What card do you want to ask for? (1 = ace, 11 = jack, ect.)");
              cardRank = keyboardReader.nextInt();
            }
            
            boolean hasCard = false;
            int gaveCardCount = 0;
            
            for (int i = 0; i < player2Hand.length; i++)
            {
              if (player2Hand[i].getRank() == cardRank)
              {
                hasCard = true;
                player1Hand.addCard(player2Hand[i]);
                player2Hand.removeCard(i);
                gaveCardCount++;
              }
            }
            
            if (hasCard == true;)
            {
              System.out.println("Player 2 gave you " + gaveCardCount + ", " +cardRank + "'s");
            }
            else
            {
              System.out.println("Go fish!");
              player1Hand.addCard(deck.getCard());
            }
            
            
            
          }
          
          
          
          
          

        }
        
        if (deck.getCardsLeft() == 0)
        {
          game == false;
        }
        
      }
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    }
    else if(numPlayers == 3)
    {
      player1Hand = createHand(deck);
      player2Hand = createHand(deck);
      player3Hand = createHand(deck);
      
      
    }
    else if(numPlayers == 4)
    {
      player1Hand = createHand(deck);
      player2Hand = createHand(deck);
      player3Hand = createHand(deck);
      player4Hand = createHand(deck);
    }
    
    
    
    
    
  } // end of main
  
  
  
  
  
  
  public Hand createHand(DeckList inDeck)
  {
   
    Hand playerHand = new Hand(7);

    for(int i = 0; i < 7; i++)
    {
      playerHand.addCard(inDeck.getCard());
    }

    
    return playerHand;
  }
  
  
  
  
  
  
  
}